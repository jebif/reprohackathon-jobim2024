"""
Run a RNA seq analysis workflow
"""

configfile: "config.yaml"

import os
import glob

reads = glob.glob(f'{config["reads"]}/*_*.fastq.gz')
sample_identifiers = [
    os.path.basename(read).replace(".fastq.gz", "").replace("_2", "").replace("_1", "") for read in reads
]
sample_identifiers = list(set(sample_identifiers))


rule all:
    input:
        expand(
          "results/{sample}_count.txt", sample=sample_identifiers
        )


rule star_index:
    input:
        genome=config["genome"]
    output:
        multiext(
            "tmp/genome_dir/", 
            "chrLength.txt", 
            "chrName.txt", 
            "chrNameLength.txt", 
            "chrStart.txt", 
            "Genome", 
            "genomeParameters.txt", 
            "Log.out", 
            "SA", 
            "SAindex"
        )
    params:
        genome_dir="tmp/genome_dir",
    threads: 2
    conda: "../nextflow/conda/star.yml"
    shell:
        """
        STAR --runMode genomeGenerate \
            --genomeDir "{params.genome_dir}" \
            --genomeFastaFiles "{input.genome}" \
            --runThreadN {threads}
        """

rule star_align:
    input:
        reads_1="../data/reads/{sample}_1.fastq.gz",
        reads_2="../data/reads/{sample}_2.fastq.gz",
        db=multiext(
            "tmp/genome_dir/", 
            "chrLength.txt", 
            "chrName.txt", 
            "chrNameLength.txt", 
            "chrStart.txt", 
            "Genome", 
            "genomeParameters.txt", 
            "Log.out", 
            "SA", 
            "SAindex"
        )
    output:
        bam="results/{sample}.Aligned.sortedByCoord.out.bam",
    params:
        genome_dir="tmp/genome_dir",
        replicateId="{sample}",
        prefix="results/{sample}."
    threads: 2
    conda: "../nextflow/conda /star.yml"
    shell:
        """
        STAR --genomeDir "{params.genome_dir}" \
            --readFilesIn "{input.reads_1}" "{input.reads_2}" \
            --runThreadN "{threads}" \
            --readFilesCommand zcat \
            --outFilterType BySJout \
            --alignSJoverhangMin 8 \
            --alignSJDBoverhangMin 1 \
            --outFilterMismatchNmax 999 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMattrRGline ID:{params.replicateId} LB:library PL:illumina PU:machine SM:GM12878 \
            --outFileNamePrefix "{params.prefix}"
        """

rule index_bam:
    input:
        bam="tmp/{sample}.Aligned.sortedByCoord.out.bam",
    output:
        bam="tmp/{sample}.Aligned.sortedByCoord.out.bai",
    conda: "../nextflow/conda/samtools.yml"
    shell:
        """
        samtools index "{input.bam}" 
        """

# rule qualimap:
#     input:
#         bam="tmp/{sample}.Aligned.sortedByCoord.out.bam",
#         gtf=config["genes"]
#     output:
#       ?
#     params:
#         replicateId="{sample}"
#     shell:
#         """
#         qualimap rnaseq -bam "{input.bam}"" -gtf "{input.gtf}" -outdir "results/{params.replicateId}-qualimap-report" --java-mem-size=16G
#         """
        
rule featurecounts:
    input:
        bam="tmp/{sample}.Aligned.sortedByCoord.out.bam",
        gtf=config["genes"]
    output:
        counts="results/{sample}_count.txt"
    conda: "../nextflow/conda/featurecounts.yml"
    shell:
        """
        featureCounts -p -s 0 \
              -t exon \
              -g gene_id \
              -a "{input.gtf}" \
              -o "{output.counts}" \
              "{input.bam}"
        """
    